{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","calendarDates","Array","fill","map","e","i","useState","choosingDate","setChoosingDate","hoverEffect","setHoverEffect","startDate","setStartDate","endDate","setEndDate","className","onClick","day","index","dayNumber","selected","isBetween","handleIsBetween","handleUpdateCalendar","onMouseOver","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAGe,SAASA,IACtB,IAAMC,EAAgBC,MAAM,IAAIC,KAAK,GAAGC,KAAI,SAACC,EAAGC,GAAJ,OAAUA,KAD1B,EAGYC,mBAAS,SAHrB,mBAGrBC,EAHqB,KAGPC,EAHO,OAIUF,mBAAS,MAJnB,mBAIrBG,EAJqB,KAIRC,EAJQ,OAKMJ,mBAAS,MALf,mBAKrBK,EALqB,KAKVC,EALU,OAMEN,mBAAS,MANX,mBAMrBO,EANqB,KAMZC,EANY,KA+B5B,OACE,qCACE,sBAAKC,UAAU,eAAf,UACE,yBACEA,UAAS,8BAA0C,UAAjBR,EAA2B,aAAe,IAC5ES,QAAS,kBAAMR,EAAgB,UAFjC,wBAIa,+BAAOG,OAEpB,yBACEI,UAAS,8BAA0C,QAAjBR,EAAyB,aAAe,IAC1ES,QAAS,kBAAMR,EAAgB,QAFjC,sBAIW,+BAAOK,UAGpB,qBAAKE,UAAU,WAAf,SACGf,EAAcG,KAAI,SAACc,EAAKC,GAEvB,IAAMC,EAAYF,EAAM,EACpBG,EAAWD,IAAcR,GAAaQ,IAAcN,EACpDQ,EA1BY,SAACJ,GACvB,OAAIN,IAAcE,EAAgBI,EAAMN,GAAaM,EAAMR,EACpDQ,EAAMN,GAAaM,EAAMJ,EAwBVS,CAAgBH,GAEhC,OACE,wBACEJ,UAAS,uBAAkBK,EAAW,WAAa,GAA1C,YAAgDC,EAAY,UAAY,IAEjFL,QAAS,kBAlDQ,SAACC,GAC5B,OAAIN,GAAaM,EAAMN,GACrBC,EAAaK,GACNT,EAAgB,QAErBK,GAAWI,EAAMJ,GACnBC,EAAWG,GACJT,EAAgB,QAEJ,UAAjBD,GACFK,EAAaK,GACNT,EAAgB,aAEJ,QAAjBD,GACFO,EAAWG,IAoCYM,CAAqBJ,IACpCK,YAAa,kBAAMd,EAAeS,IAJpC,SAMGA,GAJID,WC5DnB,IAYeO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.be69966a.chunk.js","sourcesContent":["import { useState } from 'react';\nimport './App.css';\n\nexport default function App() {\n  const calendarDates = Array(31).fill(0).map((e, i) => i);\n\n  const [choosingDate, setChoosingDate] = useState('start');\n  const [hoverEffect, setHoverEffect] = useState(null);\n  const [startDate, setStartDate] = useState(null);\n  const [endDate, setEndDate] = useState(null);\n\n  const handleUpdateCalendar = (day) => {\n    if (startDate && day < startDate) {\n      setStartDate(day);\n      return setChoosingDate('end');\n    }\n    if (endDate && day > endDate) {\n      setEndDate(day);\n      return setChoosingDate('end');\n    }\n    if (choosingDate === 'start') {\n      setStartDate(day);\n      return setChoosingDate('end');\n    }\n    if (choosingDate === 'end') {\n      setEndDate(day);\n    }\n  }\n\n  const handleIsBetween = (day) => {\n    if (startDate && !endDate) return day > startDate && day < hoverEffect;\n    return day > startDate && day < endDate;\n  }\n\n  return (\n    <>\n      <div className=\"date-chooser\">\n        <button\n          className={`date-chooser-button ${choosingDate === 'start' ? 'ischoosing' : ''}`}\n          onClick={() => setChoosingDate('start')}\n        >\n          Start Date <span>{startDate}</span>\n        </button>\n        <button\n          className={`date-chooser-button ${choosingDate === 'end' ? 'ischoosing' : ''}`}\n          onClick={() => setChoosingDate('end')}\n        >\n          End Date <span>{endDate}</span>\n        </button>\n      </div>\n      <div className=\"calendar\">\n        {calendarDates.map((day, index) => {\n\n          const dayNumber = day + 1;\n          let selected = dayNumber === startDate || dayNumber === endDate;\n          let isBetween = handleIsBetween(dayNumber);\n\n          return (\n            <button\n              className={`calendar-day ${selected ? 'selected' : ''} ${isBetween ? 'between' : ''}`}\n              key={index}\n              onClick={() => handleUpdateCalendar(dayNumber)}\n              onMouseOver={() => setHoverEffect(dayNumber)}\n            >\n              {dayNumber}\n            </button>)\n        })}\n      </div>\n    </>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}